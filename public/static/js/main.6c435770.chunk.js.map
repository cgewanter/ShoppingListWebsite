{"version":3,"sources":["Page1.jsx","Page2.jsx","App.js","serviceWorker.js","index.js"],"names":["Page1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addItem","console","log","state","items","join","push","name","fetch","method","body","JSON","stringify","headers","Content-Type","setId","e","setState","itemId","target","value","setName","setCateg","categ","react_default","a","createElement","Fragment","id","onChange","onClick","Component","Page2","setNewItems","itemsArray","item","then","response","json","data","forEach","className","map","App","currentPage","_this2","src_Page1","src_Page2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA6DeA,oBAzDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAILQ,QAAU,WAETC,QAAQC,IAAI,eACbD,QAAQC,IAAIT,EAAKU,OACjBF,QAAQC,IAAIT,EAAKU,MAAMC,MAAMC,QAC7BZ,EAAKU,MAAMC,MAAME,KAAKb,EAAKU,MAAMI,MAChCC,MAAM,8BAA+B,CACpCC,OAAQ,OACTC,KAAMC,KAAKC,UAAUnB,EAAKU,OAC1BU,QAAS,CACRC,eAAgB,uBAfCrB,EAoBnBsB,MAAQ,SAACC,GACRf,QAAQC,IAAIc,GACZvB,EAAKwB,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAtBf3B,EAyBnB4B,QAAU,SAACL,GACVf,QAAQC,IAAIc,GACZvB,EAAKwB,SAAS,CAAEV,KAAMS,EAAEG,OAAOC,SA3Bb3B,EA8BpB6B,SAAW,SAACN,GACXf,QAAQC,IAAIc,GACZvB,EAAKwB,SAAS,CAAEM,MAAOP,EAAEG,OAAOC,SA9BjC3B,EAAKU,MAAQ,CAAEe,OAAQ,GAAIX,KAAM,GAAIgB,MAAO,GAAInB,MAAO,IAFnCX,wEAoClB,OACA+B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACAH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOE,GAAG,SAASR,MAAOxB,KAAKO,MAAMe,OAAQW,SAAUjC,KAAKmB,QAC5DS,EAAAC,EAAAC,cAAA,SAAOE,GAAG,OAAOR,MAAOxB,KAAKO,MAAMI,KAAOsB,SAAUjC,KAAKyB,UAC1DG,EAAAC,EAAAC,cAAA,SAAOE,GAAG,QAAQR,MAAOxB,KAAKO,MAAMoB,MAAOM,SAAUjC,KAAK0B,WAC1DE,EAAAC,EAAAC,cAAA,UAAQI,QAASlC,KAAKI,SAAtB,YACAwB,EAAAC,EAAAC,cAAA,qCAC0B9B,KAAKO,MAAMC,eA7CnB2B,cCyCLC,cAxCb,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACpBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KAKLyC,YAAa,SAACC,GACbzC,EAAKwB,SAAS,CAAEkB,KAAMD,KALxBzC,EAAKU,MAAQ,CAAEC,MACP,CAAC,CAACG,KAAM,YAHId,mFAWlBQ,QAAQC,IAAI,mBACZ,IAAM+B,EAAcrC,KAAKqC,YACzBzB,MAAM,UACL4B,KACF,SAASC,GACPA,EAASC,OAAOF,KAAK,SAASG,GAC7BN,EAAYM,GACbA,EAAKC,QAAQ,SAAAL,GAAI,OAAIlC,QAAQC,IAAIiC,0CAQjC,OADDlC,QAAQC,IAAI,UAAWN,KAAKO,OAEzBqB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OAClBjB,EAAAC,EAAAC,cAAA,yCAKA9B,KAAKO,MAAMC,MAAMsC,IAAI,SAAAP,GAAI,OAAKX,EAAAC,EAAAC,cAAA,WAAMS,EAAK5B,gBAlCxBwB,aCyBLY,cAtBb,SAAAA,EAAYnD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IACpBlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMJ,KACDW,MAAQ,CAAEyC,YAAa,GAFRnD,wEAKV,IAAAoD,EAAAjD,KACP,OACH4B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACKH,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OAEU,IAA3B7C,KAAKO,MAAMyC,YACTpB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,OAGHvB,EAAAC,EAAAC,cAAA,UAAQI,QAAS,WAAQe,EAAK5B,SAAS,CAAE2B,YAAa,MAAtD,UACApB,EAAAC,EAAAC,cAAA,UAAQI,QAAS,WAAQe,EAAK5B,SAAS,CAAE2B,YAAa,MAAtD,kBAjBeb,aCOEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.6c435770.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Page1 extends Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.state = { itemId: \"\", name: \"\", categ: \"\", items: []};\n  }\n  \n  addItem = () => {\n\n\t  console.log(\"adding item\");\n\t\tconsole.log(this.state);\n\t\tconsole.log(this.state.items.join());\n\t\tthis.state.items.push(this.state.name);\n\t  fetch('http://localhost:8080/items', {\n\t\t  method: \"POST\",\n\t\t\tbody: JSON.stringify(this.state),\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t }\n\t\t});\n  }\n  \n  setId = (e) => {\n\t  console.log(e);\n\t  this.setState({ itemId: e.target.value });\n  }\n  \n  setName = (e) => {\n\t  console.log(e);\n\t  this.setState({ name: e.target.value });\n\t}\n\t\n\tsetCateg = (e) => {\n\t\tconsole.log(e);\n\t\tthis.setState({ categ: e.target.value});\n\t}\n  \n  render() {\n\t  return (\n\t  <React.Fragment>\n\t\t\t<p>This is page 1</p>\n\t  <input id=\"itemId\" value={this.state.itemId} onChange={this.setId}/>\n\t  <input id=\"name\" value={this.state.name}  onChange={this.setName}/>\n\t\t<input id=\"categ\" value={this.state.categ} onChange={this.setCateg}/>\n\t\t<button onClick={this.addItem}>Add Item</button>\n\t\t<div>\n\t\t\t\tYou added these items: {this.state.items}\n\t\t\t\t\n\t\t\t</div> \n\n\t  \n\t\t\n\t\t\t\n\t  </React.Fragment>\n\t\t);\n\t\n  }\n}\n\nexport default Page1;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Page2 extends Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.state = { items:\n\t\t\t\t\t\t\t\t [{name: \"sample\"}] }\n  };\n  \n  setNewItems= (itemsArray) => {\n\t  this.setState({ item: itemsArray});\n  }\n\t\n  componentDidMount() {\n\t  console.log(\"This is page 2.\");\n\t  const setNewItems = this.setNewItems;\n\t  fetch('/items')\n\t  .then(\n\t\tfunction(response) {\n\t\t  response.json().then(function(data) {\n\t\t\t  setNewItems(data);\n\t\t\t\tdata.forEach(item => console.log(item));\n\t\t  });\n\t\t}\n\t  );\n  }\n  \n  render() {\n\t  console.log(\"rending\", this.state);\n    return (\n      <div className=\"App\">\n\t\t\t<p>\n\t\t\t\tPage 2: Here are your lists.\n\t\t\t</p>\n\n\t  {\t\t\t\n\t\t\tthis.state.items.map(item => (<div>{item.name}</div>))\n\t\t  }\n      </div>\n    );\n  }\n}\n\nexport default Page2;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Page1 from './Page1';\nimport Page2 from './Page2';\n\nclass App extends Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.state = { currentPage: 1 };\n  }\n\n  render() {\n    return (\n\t<React.Fragment>\n      <div className=\"App\">\n\t  {\n\t\t  this.state.currentPage === 1\n\t\t  ? <Page1/>\n\t\t  : <Page2/>\n\t  }\n      </div>\n\t  <button onClick={() => { this.setState({ currentPage: 1})}}>Page 1</button>\n\t  <button onClick={() => { this.setState({ currentPage: 2})}}>Page 2</button>\n\t</React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}