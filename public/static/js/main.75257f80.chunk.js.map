{"version":3,"sources":["Page1.jsx","Page2.jsx","App.js","serviceWorker.js","index.js"],"names":["Page1","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addCard","console","log","state","fetch","method","body","JSON","stringify","headers","Content-Type","setText","e","setState","text","target","value","setColor","color","react_default","a","createElement","Fragment","id","onChange","onClick","Component","Page2","setNewCards","cardsArray","cards","then","response","json","data","forEach","card","className","map","style","App","currentPage","_this2","src_Page1","src_Page2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75257f80.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Page1 extends Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.state = { text: \"\", color: \"\" };\n  }\n  \n  addCard = () => {\n\t  console.log(\"adding card!\");\n\t  console.log(this.state);\n\t  fetch('/cards', {\n\t\t  method: \"POST\",\n\t\t\tbody: JSON.stringify(this.state),\n\t\t\t headers: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t }\n\t\t});\n  }\n  \n  setText = (e) => {\n\t  console.log(e);\n\t  this.setState({ text: e.target.value });\n  }\n  \n  setColor = (e) => {\n\t  console.log(e);\n\t  this.setState({ color: e.target.value });\n  }\n  \n  render() {\n\t  return (\n\t  <React.Fragment>\n\t  <input id=\"text\" value={this.state.text} onChange={this.setText}/>\n\t  <input id=\"color\" value={this.state.color}  onChange={this.setColor}/>\n\t  <button onClick={this.addCard}>Add</button>\n\t  </React.Fragment>\n\t  );\n  }\n}\n\nexport default Page1;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Page2 extends Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.state = { cards: [] };\n  }\n  \n  setNewCards = (cardsArray) => {\n\t  this.setState({ cards: cardsArray});\n  }\n\t\n  componentDidMount() {\n\t  console.log(\"here is page 2\");\n\t  const setNewCards = this.setNewCards;\n\t  fetch('/cards')\n\t  .then(\n\t\tfunction(response) {\n\t\t  response.json().then(function(data) {\n\t\t\t  setNewCards(data);\n\t\t\t\tdata.forEach(card => console.log(card));\n\t\t  });\n\t\t}\n\t  );\n  }\n  \n  render() {\n\t  console.log(\"rending\", this.state);\n    return (\n      <div className=\"App\">\n\t  {\n\t\t  this.state.cards.map(card => (<div style={{ color: card.color }}>{card.text}</div>))\n\t  }\n      </div>\n    );\n  }\n}\n\nexport default Page2;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Page1 from './Page1';\nimport Page2 from './Page2';\n\nclass App extends Component {\n  constructor(props) {\n\tsuper(props);\n\tthis.state = { currentPage: 1 };\n  }\n\n  render() {\n    return (\n\t<React.Fragment>\n      <div className=\"App\">\n\t  {\n\t\t  this.state.currentPage === 1\n\t\t  ? <Page1/>\n\t\t  : <Page2/>\n\t  }\n      </div>\n\t  <button onClick={() => { this.setState({ currentPage: 1})}}>Button1</button>\n\t  <button onClick={() => { this.setState({ currentPage: 2})}}>Button2</button>\n\t</React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}